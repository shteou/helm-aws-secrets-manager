#!/usr/bin/env python3
import boto3, sys, yaml
from botocore.exceptions import ClientError

env = sys.argv[1]
region = sys.argv[2]

def get_secret_string(secret_name, version):
  session = boto3.session.Session()

  client = session.client(
    service_name='secretsmanager',
    region_name=region,
  )

  try:
    get_secret_value_response = client.get_secret_value(
      SecretId=secret_name,
      VersionId=version
    )
  except ClientError as e:
    if e.response['Error']['Code'] == 'ResourceNotFoundException':
      print("The requested secret " + secret_name + " was not found")
    elif e.response['Error']['Code'] == 'InvalidRequestException':
      print("The request was invalid due to:", e)
    elif e.response['Error']['Code'] == 'InvalidParameterException':
      print("The request had invalid params:", e)
    elif e.response['Error']['Code'] == 'DecryptionFailure':
      print("The requested secret can't be decrypted using the provided KMS key:", e)
    elif e.response['Error']['Code'] == 'InternalServiceError':
      print("An error occurred on service side:", e)
  else:
    return get_secret_value_response['SecretString']

  return None



def rewrite_secrets(nested_dictionary):
  items = nested_dictionary.items()

  for key, value in items:
    if isinstance(value, (dict)):
      rewrite_secrets(value)
    else: # Assume it's a string valu
      (name, version) = value.split("#")
      nested_dictionary[key] = get_secret_string(name, version)

with open(f"secrets-{env}.yaml.template", 'r') as template_file:
  secrets = yaml.load(template_file.read(), Loader=yaml.SafeLoader)

  with open(f"secrets-{env}.yaml", 'w') as file:
    rewrite_secrets(secrets)
    documents = yaml.dump(secrets, file)

